/ n())
flights %>%
filter(!is.na(arr_delay), arr_delay > 0) %>%
group_by(dest) %>%
mutate(
arr_delay_total = sum(arr_delay),
arr_delay_prop = arr_delay / arr_delay_total
)
flights %>%
filter(!is.na(arr_delay), arr_delay > 0) %>%
group_by(dest) %>%
mutate(
arr_delay_total = sum(arr_delay),
arr_delay_prop = arr_delay / arr_delay_total
) %>%
select(tailnum, dest, arr_delay_total, arr_delay_prop)
## 4. For each destination, compute the total minutes of delay. For each flight,
##    compute the proportion of the total delay for its destination.
flights %>%
filter(!is.na(arr_delay), arr_delay > 0) %>%
group_by(dest) %>%
summarise(
arr_delay_total = sum(arr_delay),
arr_delay_prop = arr_delay / arr_delay_total
)
## 4. For each destination, compute the total minutes of delay. For each flight,
##    compute the proportion of the total delay for its destination.
flights %>%
filter(!is.na(arr_delay), arr_delay > 0) %>%
group_by(dest) %>%
transmute(
arr_delay_total = sum(arr_delay),
arr_delay_prop = arr_delay / arr_delay_total
)
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute)
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay))
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
select(year, month, day, hour, minute, dep_delay, dep_delay_lag)
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
select(year, month, day, hour, minute, dep_delay, dep_delay_lag)
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
select(year, month, day, hour, minute, dep_delay, dep_delay_lag) %>%
head(20)
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
select(year, month, day, hour, minute, dep_delay, dep_delay_lag, origin, dest) %>%
head(20)
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
select(year, month, day, hour, minute, dep_delay, dep_delay_lag, origin, dest) %>%
head(1000)
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
select(year, month, day, hour, minute, dep_delay, dep_delay_lag, origin, dest) %>%
View()
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
ggplot(mapping = aes(x = dep_delay_lag, y = dep_delay)) +
geom_point() +
geom_smooth()
lagged_delays %>%
group_by(dep_delay_lag) %>%
summarise(dep_delay_mean = mean(dep_delay)) %>%
ggplot(aes(y = dep_delay_mean, x = dep_delay_lag)) +
geom_point() +
geom_smooth() +
labs(y = "Departure Delay", x = "Previous Departure Delay")
lagged_delays <- flights %>%
arrange(origin, year, month, day, dep_time) %>%
group_by(origin) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
filter(!is.na(dep_delay), !is.na(dep_delay_lag))
lagged_delays %>%
group_by(dep_delay_lag) %>%
summarise(dep_delay_mean = mean(dep_delay)) %>%
ggplot(aes(y = dep_delay_mean, x = dep_delay_lag)) +
geom_point() +
geom_smooth() +
labs(y = "Departure Delay", x = "Previous Departure Delay")
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
ggplot(mapping = aes(x = dep_delay_lag, y = dep_delay)) +
geom_point() +
geom_smooth()
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(origin)
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(origin) %>%
arrange(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
ggplot(mapping = aes(x = dep_delay_lag, y = dep_delay)) +
geom_point() +
geom_smooth()
## 5. Delays are typically temporally correlated: even once the problem that caused
##    the initial delay has been resolved, later flights are delayed to allow earlier
##    flights to leave. Using lag(), explore how the delay of a flight is related to the
##    delay of the immediately preceding flight.
flights %>%
group_by(origin) %>%
arrange(year, month, day, hour, minute) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
ggplot(mapping = aes(x = dep_delay_lag, y = dep_delay)) +
geom_point() +
geom_smooth(se = FALSE)
flights %>%
group_by(dest) %>%
mutate(
mean_of_air_time = mean(air_time),
sd_of_air_time = sd(air_time),
z_scope = (air_time - mean_of_air_time) / sd_of_air_time
)
## 6. Look at each destination. Can you find flights that are suspiciously fast?
##    (i.e. flights that represent a potential data entry error).
##    Compute the air time a flight relative to the shortest flight to that destination.
##    Which flights were most delayed in the air?
### Reference: https://lokhc.wordpress.com/r-for-data-science-solutions/chapter-5-data-transformation/
flights %>%
group_by(dest) %>%
mutate(
mean_of_air_time = mean(air_time),
sd_of_air_time = sd(air_time),
z_scope = (air_time - mean_of_air_time) / sd_of_air_time
) %>%
select(z_scope ,mean_of_air_time, sd_air_time, everything())
## 6. Look at each destination. Can you find flights that are suspiciously fast?
##    (i.e. flights that represent a potential data entry error).
##    Compute the air time a flight relative to the shortest flight to that destination.
##    Which flights were most delayed in the air?
### Reference: https://lokhc.wordpress.com/r-for-data-science-solutions/chapter-5-data-transformation/
flights %>%
group_by(dest) %>%
mutate(
mean_of_air_time = mean(air_time),
sd_of_air_time = sd(air_time),
z_scope = (air_time - mean_of_air_time) / sd_of_air_time
) %>%
select(z_scope ,mean_of_air_time, sd_of_air_time, everything())
## 6. Look at each destination. Can you find flights that are suspiciously fast?
##    (i.e. flights that represent a potential data entry error).
##    Compute the air time a flight relative to the shortest flight to that destination.
##    Which flights were most delayed in the air?
### Reference: https://lokhc.wordpress.com/r-for-data-science-solutions/chapter-5-data-transformation/
flights %>%
group_by(dest) %>%
mutate(
mean_of_air_time = mean(air_time, na.rm = TRUE),
sd_of_air_time = sd(air_time, na.rm = TRUE),
z_scope = (air_time - mean_of_air_time) / sd_of_air_time
) %>%
select(z_scope ,mean_of_air_time, sd_of_air_time, everything())
## 6. Look at each destination. Can you find flights that are suspiciously fast?
##    (i.e. flights that represent a potential data entry error).
##    Compute the air time a flight relative to the shortest flight to that destination.
##    Which flights were most delayed in the air?
### Reference: https://lokhc.wordpress.com/r-for-data-science-solutions/chapter-5-data-transformation/
flights %>%
filter(!is.na(air_time)) %>%
group_by(dest) %>%
mutate(
mean_of_air_time = mean(air_time, na.rm = TRUE),
sd_of_air_time = sd(air_time, na.rm = TRUE),
z_scope = (air_time - mean_of_air_time) / sd_of_air_time
) %>%
select(z_scope ,mean_of_air_time, sd_of_air_time, everything())
## 6. Look at each destination. Can you find flights that are suspiciously fast?
##    (i.e. flights that represent a potential data entry error).
##    Compute the air time a flight relative to the shortest flight to that destination.
##    Which flights were most delayed in the air?
### Reference: https://lokhc.wordpress.com/r-for-data-science-solutions/chapter-5-data-transformation/
flights %>%
filter(!is.na(air_time)) %>%
group_by(dest) %>%
mutate(
mean_of_air_time = mean(air_time, na.rm = TRUE),
sd_of_air_time = sd(air_time, na.rm = TRUE),
z_scope = (air_time - mean_of_air_time) / sd_of_air_time
) %>%
select(z_scope ,mean_of_air_time, sd_of_air_time, air_time,everything())
## 6. Look at each destination. Can you find flights that are suspiciously fast?
##    (i.e. flights that represent a potential data entry error).
##    Compute the air time a flight relative to the shortest flight to that destination.
##    Which flights were most delayed in the air?
### Reference: https://lokhc.wordpress.com/r-for-data-science-solutions/chapter-5-data-transformation/
flights %>%
filter(!is.na(air_time)) %>%
group_by(dest) %>%
mutate(
mean_of_air_time = mean(air_time, na.rm = TRUE),
sd_of_air_time = sd(air_time, na.rm = TRUE),
z_scope = (air_time - mean_of_air_time) / sd_of_air_time
) %>%
select(
z_scope ,
mean_of_air_time,
sd_of_air_time,
air_time,
everything()
) %>%
arrange(z_scope)
?count
## 7. Find all destinations that are flown by at least two carriers.
##    Use that information to rank the carriers.
flights %>%
group_by(dest) %>%
summarise(
num_carrier = d_distinc(carrier)
)
## 7. Find all destinations that are flown by at least two carriers.
##    Use that information to rank the carriers.
flights %>%
group_by(dest) %>%
summarise(
num_carrier = n_distinct(carrier)
)
flights %>% group_by(dest) %>%
summarise(num_carrier = length(unique(carrier)))
flights %>%
group_by(dest) %>%
summarise(
num_carrier = count(wt = carrier)
)
flights %>%
group_by(dest) %>%
summarise(
num_carrier = count(carrier)
)
flights %>%
group_by(dest) %>%
summarise(
num_carrier = sum(!is.na(carrier))
)
flights %>%
group_by(dest) %>%
summarise(
num_carrier = sum(unique(!is.na(carrier)))
)
flights %>%
group_by(dest) %>%
summarise(
num_carrier = length(unique(carrier))
)
n_distince
n_distinct
?n_distinct
## 7. Find all destinations that are flown by at least two carriers.
##    Use that information to rank the carriers.
flights %>%
group_by(dest) %>%
summarise(
num_carrier = n_distinct(carrier)
)
## 7. Find all destinations that are flown by at least two carriers.
##    Use that information to rank the carriers.
flights %>%
group_by(dest) %>%
summarise(
num_carrier = n_distinct(carrier)
) %>%
filter(num_carrier >= 2)
## 7. Find all destinations that are flown by at least two carriers.
##    Use that information to rank the carriers.
flights %>%
group_by(dest) %>%
summarise(
num_carrier = n_distinct(carrier)
) %>%
filter(num_carrier >= 2) %>%
mutate(min_rank(desc(num_carrier)))
## 7. Find all destinations that are flown by at least two carriers.
##    Use that information to rank the carriers.
flights %>%
group_by(dest) %>%
summarise(
num_carrier = n_distinct(carrier)
) %>%
filter(num_carrier >= 2) %>%
arrange(desc(num_carrier))
## 7. Find all destinations that are flown by at least two carriers.
##    Use that information to rank the carriers.
flights %>%
group_by(dest) %>%
summarise(
num_carrier = n_distinct(carrier)
) %>%
filter(num_carrier >= 2) %>%
mutate(min_rank(desc(num_carrier))) %>%
arrange(desc(num_carrier))
## 7. Find all destinations that are flown by at least two carriers.
##    Use that information to rank the carriers.
flights %>%
group_by(dest) %>%
summarise(
num_carrier = n_distinct(carrier)
) %>%
filter(num_carrier >= 2) %>%
mutate(dense_rank(desc(num_carrier))) %>%
arrange(desc(num_carrier))
## 7. Find all destinations that are flown by at least two carriers.
##    Use that information to rank the carriers.
flights %>%
group_by(dest) %>%
summarise(
num_carrier = n_distinct(carrier)
) %>%
filter(num_carrier >= 2) %>%
mutate(rank = dense_rank(desc(num_carrier))) %>%
arrange(desc(num_carrier))
?cummax
cummax(c(3:1, 2:0, 4:2))
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
summarise(
count = sum(dep_delay)
)
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
summarise(
count = sum(dep_delay > 60)
)
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
summarise(
count = sum(dep_delay =< 60)
)
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
summarise(
count = sum(dep_delay <= 60)
)
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
summarise(count = sum(dep_delay <= 60)) %>%
arrange(count)
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
summarise(count = sum(dep_delay <= 60)) %>%
arrange(desc(count))
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
summarise(count = sum(dep_delay <= 60) / n()) %>%
arrange(desc(count))
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
mutate(
max_delay = cummax(dep_delay),
less_one_hour = max_delay < 60
) %>%
arrange(desc(count))
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
mutate(
max_delay = cummax(dep_delay),
less_one_hour = max_delay < 60
) %>%
summarize(count = sum(less_one_hour)) %>%
arrange(desc(count))
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
mutate(
max_delay = cummax(dep_delay),
less_one_hour = max_delay < 60
)
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
mutate(
max_delay = cummax(dep_delay),
less_one_hour = max_delay < 60
) %>%
select(max_delay, less_one_hour)
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
mutate(
max_delay = cummax(dep_delay),
less_one_hour = max_delay < 60
) %>%
select(arr_delay, max_delay, less_one_hour)
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
mutate(
max_delay = cummax(dep_delay),
less_one_hour = max_delay < 60
) %>%
select(dep_delay, max_delay, less_one_hour)
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
mutate(
max_delay = cummax(dep_delay),
less_one_hour = max_delay < 60
) %>%
select(dep_delay, max_delay, less_one_hour) %>%
View()
## 8. For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(tailnum) %>%
mutate(
max_delay = cummax(dep_delay),
less_one_hour = max_delay < 60
) %>%
summarize(count = sum(less_one_hour)) %>%
arrange(desc(count))
flights %>% filter(!is.na(dep_delay)) %>% group_by(tailnum) %>%
mutate(max_delay = cummax(dep_delay),
less_one_hour = max_delay < 60) %>%
summarize(count = sum(less_one_hour)) %>%
arrange(desc(count))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
source('~/Documents/Project/Notebook_with_R/R_for_Data_Science/1_Explore.R')
getwd()
ls()
rm(list = ls9)
rm(list = ls())
gc(reset = TRUE)
ls()
lbarary(pryr)
library(pryr)
parenvs(all = TRUE)
