getwd()
setwd('/Users/peter/Documents/Project/Notebook_with_R/R_for_Data_Science/')
getwd()
ls -l
ls()
mpg
data(mpg)
## 2 Introduction
### Data Exploration Program Flow
### Import -> Tidy -> Explore{ Tramsform <-> Visualise <-> Model } -> Communicate
library(tidyverse)
mpg
data(mpg)
mpg
## 3.5 Facets
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, norw = 2)
## 3.5 Facets
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
head(mpg)
args(facet_wrap)
getwd()
### To facet your plot by a single variable, use facet_wrap()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
### To facet your plot by a single variable, use facet_wrap()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(class, nrow = 2)
### To facet your plot by a single variable, use facet_wrap()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
### To facet your plot by a single variable, use facet_wrap()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
### To facet your plot on the combination of two variables, use facet_grid()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
### To facet your plot on the combination of two variables, use facet_grid()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
### To facet your plot on the combination of two variables, use facet_grid()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
head(mpg)
# 3.5.1 Exercises
## 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom(mapping = aes(x = drv, y = crl))
# 3.5.1 Exercises
## 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = crl))
# 3.5.1 Exercises
## 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
# 3.5.1 Exercises
## 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(~ displ)
# 3.5.1 Exercises
## 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_wrap(~ displ)
## 2. What do the empty cells in plot with facet_grid(drv ~ cyl) mean? How do they relate to this plot?
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
## 2. What do the empty cells in plot with facet_grid(drv ~ cyl) mean? How do they relate to this plot?
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(drv ~ cyl)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl, color = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl, color = drv))
## 3. What plots does the following code make? What does . do?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ drv)
## 3. What plots does the following code make? What does . do?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
## 4. Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
?facet_wrap
# 3.6 Geometric objects
## A geom is the geometrical object that a plot uses to represent data.
## left
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
## right
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
?mpg
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv)) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv), show.legend = FALSE)
## display multiple geoms in the same plot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
## passing a set of mappings to ggplot()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
?geom_smooth
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == 'subcompact'), se = FALSE)
## 2. Run this code in your head and predict what the output will look like.
## Then, run the code in R and check your predictions.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
?mpg
## 6. Recreate the R code necessary to generate the following graphs.
### (1)
ggplot(data = mpg, mapping = aes(x = displ,  y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
### (2)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(group = hwy)
### (2)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(groups = hwy)
### (2)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(mapping = aes(group = hwy))
### (2)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(mapping = aes(group = drv))
### (2)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(mapping = aes(group = drv), se = FALSE)
### (3)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
### (4)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth(se = FALSE)
### (5)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth(mapping = aes(linetype = drv))
### (5)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth(mapping = aes(linetype = drv), se = FALSE)
?geom_point
### (6)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv), stroke = 5) +
geom_point()
### (6)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = 'white', size =4)) +
geom_point(mapping = aes(color = drv))
### (6)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(color = 'white', size =4) +
geom_point(mapping = aes(color = drv))
data(diamonds)
head(diamonds)
dim(diamonds)
## 3.7 Statistical transformations
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
?geom_bar
?tribble
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
?`..prop..`
## display a bar chart of proportion, rather than count
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
head(diamonds, 5)
## display a bar chart of proportion, rather than count
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 2))
## display a bar chart of proportion, rather than count
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
?stat_summary
## use stat_summary(), which summarises the y values for each unique x value
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(data = diamonds, mapping = aes(x = cut, y = depth)) + geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut, y = depth)) + geom_point()
ggplot(data = diamonds, mapping = aes(x = cut, y = depth)) + geom_violin()
?stat_bin
?stat_summary
?geom_pointrange
?geom_point
# 3.7.1 Exercises
## What is the default geom associated with stat_summary()?
## How could you rewrite the previous plot to use that geom function
## instead of the stat function?
### Use "?stat_summary()", you'll find the poperty of default geom is geom_pointrange()
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
# 3.7.1 Exercises
## What is the default geom associated with stat_summary()?
## How could you rewrite the previous plot to use that geom function
## instead of the stat function?
### Use "?stat_summary()", you'll find the poperty of default geom is geom_pointrange()
ggplot(data = diamond) +
geom_pointrange (
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
# 3.7.1 Exercises
## What is the default geom associated with stat_summary()?
## How could you rewrite the previous plot to use that geom function
## instead of the stat function?
### Use "?stat_summary()", you'll find the poperty of default geom is geom_pointrange()
ggplot(data = diamonds) +
geom_pointrange (
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?geom_pointrange()
# 3.7.1 Exercises
## What is the default geom associated with stat_summary()?
## How could you rewrite the previous plot to use that geom function
## instead of the stat function?
### Use "?stat_summary()", you'll find the poperty of default geom is geom_pointrange()
ggplot(data = diamonds) +
geom_pointrange (
mapping = aes(x = cut, y = depth),
stat = 'summary'
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
# 3.7.1 Exercises
## What is the default geom associated with stat_summary()?
## How could you rewrite the previous plot to use that geom function
## instead of the stat function?
### Use "?stat_summary()", you'll find the poperty of default geom is geom_pointrange()
ggplot(data = diamonds) +
geom_pointrange (
mapping = aes(x = cut, y = depth),
stat = 'summary',
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?geom_col
?stat_smooth
## 5. In our proportion bar chart, we need to set group = 1. Why?
## In other words what is the problem with these two graphs?
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..))
## 5. In our proportion bar chart, we need to set group = 1. Why?
## In other words what is the problem with these two graphs?
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
## 5. In our proportion bar chart, we need to set group = 1. Why?
## In other words what is the problem with these two graphs?
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
?aes()
?mapping
geom_bar
?geom_bar
## 5. In our proportion bar chart, we need to set group = 1. Why?
## In other words what is the problem with these two graphs?
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 2))
## 5. In our proportion bar chart, we need to set group = 1. Why?
## In other words what is the problem with these two graphs?
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 10))
## 5. In our proportion bar chart, we need to set group = 1. Why?
## In other words what is the problem with these two graphs?
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
))
## 5. In our proportion bar chart, we need to set group = 1. Why?
## In other words what is the problem with these two graphs?
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
### If we fail to set group = 1, the proportions for each cut are calculated
### using the complete dataset, rather than each subset of cut.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
### If we fail to set group = 1, the proportions for each cut are calculated
### using the complete dataset, rather than each subset of cut.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
